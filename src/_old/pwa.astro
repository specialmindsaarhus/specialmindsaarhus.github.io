---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import VideoComponent from '../components/VdeoComponent.astro'
//import Engineering from './engineering.astro';

const d = new Date()
const whatDay = d.getDay()




---

<Layout title="Special Minds Aarhus @ Github">
	<main>
		<h1 class="mt-6">Vejlednig<span class="text-gradient">
			Til PWA'en
			</span></h1>


			<section>
				<h2>Lav en klon af en GitHub template</h2>

				<h3>1. Opret dit eget repository ud fra template:</h3>
				<p>
					1. Gå til linket: Åbn CATalog PWA Starter på GitHub.<br>
					Link: <a href="https://github.com/specialmindsaarhus/CATalog_PWA_Starter" target="_blank">https://github.com/specialmindsaarhus/CATalog_PWA_Starter</a>
				</p>
				<p>
					2. Brug som template: Klik på den grønne knap "Use this template", der vises øverst til højre på siden. Vælg derefter "Create a new repository".
				</p>
				<p>
					3. Navngiv dit nye repository: Giv dit projekt et navn (Eks.: my-first-pwa) og sørg for, at repository-indstillingerne er, som du ønsker dem (sæt dem til public, så du kan se app’en fra din telefon), og klik på "Create repository from template".
				</p>
			
				<h3>2. Åbn dit repository i GitHub Code:</h3>
				<p>
					1. Gå til dit nye repository: Når du har oprettet din egen kopi af template-projektet, vil du blive ført til dit nye repository.
				</p>
				<p>
					2. Åbn i GitHub Code: Klik på knappen "Code" og vælg "GitHub Code" for at åbne projektet direkte i en browserbaseret udviklingsmiljø.
				</p>
			
				<h3>3. Lav en lille ændring:</h3>
				<p>
					1. Find en fil at ændre: Inde i GitHub Code kan du se dit projekts filer. Find en fil, for eksempel index.html eller en .js fil, og lav en lille ændring – for eksempel tilføje en linje tekst.
				</p>
				<p>
					Eksempel: Tilføj en ny <code>&lt;h3&gt;</code> tag under overskriften, f.eks. <code>&lt;h3&gt;Hej fra mit eget repository!&lt;/h3&gt;</code>.
				</p>
			
				<h3>4. Gem og commit dine ændringer:</h3>
				<p>
					1. Gem din ændring: Når du har lavet ændringen, kan du trykke på "Save" (Ctrl+S eller Cmd+S).
				</p>
				<p>
					2. Commit ændringen: Nede i GitHub Codes venstre hjørne ser du en fane med “Source Control”. Her kan du tilføje en commit-besked, f.eks. "Ændret hilsen på forsiden", og klik derefter på "Commit".
				</p>
			
				<h3>5. Push ændringer til dit repository:</h3>
				<p>
					1. Push dine ændringer: Efter du har committet, skal du trykke på den lille "sync"-knap, der står for "Push changes" oppe i venstre hjørne af GitHub Code-vinduet.
				</p>
				<p>
					2. Tjek ændringen: Gå tilbage til dit repository på GitHub og opdater siden. Du skulle nu kunne se din ændring live i din kode.
				</p>
				<VideoComponent 
				src="/video/github_vejledning.mp4"
			/>
			</section>
			<br>
			<div style="border-bottom: 2px solid white;"></div>
			<br>
			<section >
				<h2>Lav din første PWA</h2>

<h3>Side 1: Tilføjelse af Manifest i public-folderen</h3>
<p class="font-bold">
    Hvad er manifest.webmanifest, og hvorfor er det vigtigt?
</p>
<p>
    Manifestet er som en beskrivelse af din app, der fortæller browseren, hvordan den skal opføre sig, når den bliver installeret som en PWA (Progressive Web App). Det er en lille fil, men den er vigtig, fordi den giver din PWA sit navn, ikon, farver og andre vigtige informationer. For eksempel, hvis brugerne vil have din app på deres startskærm, så er det manifestet, der sørger for, at ikonet vises korrekt.
</p>
<p class="font-bold">Sådan gør du:</p>
<ol>
    <li>Åbn dit projekt, og gå til public-folderen. Dette er det sted, hvor dine offentligt tilgængelige filer ligger.</li>
    <li>Opret en ny fil og kald den <code>manifest.webmanifest</code>.</li>
    <li>Kopier koden nedenfor ind i filen:</li>
    <pre><code>
		&#123;<br>
		&nbsp;&quot;name&quot;: &quot;My Cat PWA&quot;,<br>
		&nbsp;&quot;short_name&quot;: &quot;Cat PWA&quot;,<br>
		&nbsp;&quot;description&quot;: &quot;Til alle katteelskere&quot;,<br>
		&nbsp;&quot;start_url&quot;: &quot;/&quot;,<br>
		&nbsp;&quot;display&quot;: &quot;standalone&quot;,<br>
		&nbsp;&quot;background_color&quot;: &quot;#ffffff&quot;,<br>
		&nbsp;&quot;theme_color&quot;: &quot;#000000&quot;,<br>
		&nbsp;&quot;icons&quot;: [<br>
		&nbsp;&nbsp;&#123;<br>
		&nbsp;&nbsp;&nbsp;&quot;src&quot;: &quot;/icon-192x192.png&quot;,<br>
		&nbsp;&nbsp;&nbsp;&quot;sizes&quot;: &quot;192x192&quot;,<br>
		&nbsp;&nbsp;&nbsp;&quot;type&quot;: &quot;image/png&quot;,<br>
		&nbsp;&nbsp;&nbsp;&quot;purpose&quot;: &quot;any maskable&quot;<br>
		&nbsp;&nbsp;&#125;,<br>
		&nbsp;&nbsp;&#123;<br>
		&nbsp;&nbsp;&nbsp;&quot;src&quot;: &quot;/icon-512x512.png&quot;,<br>
		&nbsp;&nbsp;&nbsp;&quot;sizes&quot;: &quot;512x512&quot;,<br>
		&nbsp;&nbsp;&nbsp;&quot;type&quot;: &quot;image/png&quot;,<br>
		&nbsp;&nbsp;&nbsp;&quot;purpose&quot;: &quot;any maskable&quot;<br>
		&nbsp;&nbsp;&#125;<br>
		&nbsp;]
		&#125;
    </code></pre>
    <li>Gem filen i public. Nu har du lavet manifestet, der beskriver din app!</li>
</ol>

<h3>Side 2: Service Worker i public-folderen</h3>
<p>
    <span class="font-bold">
		Hvad er en service worker, og hvorfor skal vi bruge den?
		</span>
		<br><br>
    Service worker er en smart del af PWA'en, der kører i baggrunden og hjælper din app med at fungere offline eller forbedre hastigheden ved at cache (huske) bestemte filer. Den sørger også for, at appen stadig kan fungere selv uden internet.
</p>
<p>Sådan gør du:</p>
<ol>
    <li>Gå tilbage til public-folderen.</li>
    <li>Opret en ny fil og kald den <code>service-worker.js</code>.</li>
    <li>Indsæt følgende kode i filen:</li>
    <pre><code>
const CACHE_NAME = &quot;my-pwa-cache-v1&quot;;<br>
const urlsToCache = [<br>
&nbsp;&nbsp;&quot;/manifest.webmanifest&quot;,<br>
&nbsp;&nbsp;// Tilføj flere filer her, hvis nødvendigt<br>
];<br><br>

self.addEventListener(&quot;install&quot;, (event) => &#123;<br>
&nbsp;&nbsp;event.waitUntil(<br>
&nbsp;&nbsp;&nbsp;&nbsp;caches.open(CACHE_NAME).then((cache) => cache.addAll(urlsToCache))<br>
&nbsp;&nbsp;);<br>
&#125;);<br><br>

self.addEventListener(&quot;fetch&quot;, (event) => &#123;<br>
&nbsp;&nbsp;event.respondWith(<br>
&nbsp;&nbsp;&nbsp;&nbsp;caches<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.match(event.request)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then((response) => response || fetch(event.request))<br>
&nbsp;&nbsp;);<br>
&#125;);
    </code></pre>
    <li>Gem filen. Nu har du oprettet en simpel service worker, der hjælper med at cache din PWA, så den kan fungere bedre offline.</li>
</ol>

<h1>Side 3: Service Worker Register i /src/scripts/</h1>
<p>
    <span class="font-bold">
		Hvorfor skal vi registrere service worker?
	</span>
	<br>
	<br>
    Selvom vi har lavet en service worker, skal vi fortælle browseren, at den skal bruges, og det gør vi med en lille smule JavaScript. Denne kode registrerer service worker'en og sørger for, at den begynder at arbejde.
</p>
<p>Sådan gør du:</p>
<ol>
    <li>Gå til mappen <code>/src/scripts/</code> i dit projekt.</li>
    <li>Opret en ny fil, og kald den <code>sw-register.js</code>.</li>
    <li>Indsæt følgende kode i filen:</li>
    <pre><code>
if (&quot;serviceWorker&quot; in navigator) &#123;<br>
&nbsp;&nbsp;window.addEventListener(&quot;load&quot;, () => &#123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;navigator.serviceWorker<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.register(&quot;/service-worker.js&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then((registration) => &#123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Service Worker registered successfully:&quot;, registration);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.catch((error) => &#123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Service Worker registration failed:&quot;, error);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;);<br>
&nbsp;&nbsp;&#125;);<br>
&#125;
    </code></pre>
    <li>Gem filen.<br> Nu er service worker'en registreret! Når din app indlæses, vil denne kode sikre, at browseren ved, at service worker'en er klar til at gøre sin magi i baggrunden.</li>
</ol>

<VideoComponent 
		src="/video/PWA-vejledning.mp4"
/>
			</section>

			
		
			
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1.125;
		text-align: center;
		margin-bottom: 1em;
	}

	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		padding: 1.5rem;
		border-radius: 8px;
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
	}
	.instructions.color{

	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(1fr, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
